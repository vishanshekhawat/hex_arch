// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: airthmetic_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirthmaticServiceClient is the client API for AirthmaticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirthmaticServiceClient interface {
	GetAddition(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error)
	GetSubstraction(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error)
	GetMultiplication(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error)
	GetDivison(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error)
}

type airthmaticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirthmaticServiceClient(cc grpc.ClientConnInterface) AirthmaticServiceClient {
	return &airthmaticServiceClient{cc}
}

func (c *airthmaticServiceClient) GetAddition(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.AirthmaticService/GetAddition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airthmaticServiceClient) GetSubstraction(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.AirthmaticService/GetSubstraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airthmaticServiceClient) GetMultiplication(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.AirthmaticService/GetMultiplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airthmaticServiceClient) GetDivison(ctx context.Context, in *OperationParameter, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.AirthmaticService/GetDivison", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirthmaticServiceServer is the server API for AirthmaticService service.
// All implementations should embed UnimplementedAirthmaticServiceServer
// for forward compatibility
type AirthmaticServiceServer interface {
	GetAddition(context.Context, *OperationParameter) (*Answer, error)
	GetSubstraction(context.Context, *OperationParameter) (*Answer, error)
	GetMultiplication(context.Context, *OperationParameter) (*Answer, error)
	GetDivison(context.Context, *OperationParameter) (*Answer, error)
}

// UnimplementedAirthmaticServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAirthmaticServiceServer struct {
}

func (UnimplementedAirthmaticServiceServer) GetAddition(context.Context, *OperationParameter) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddition not implemented")
}
func (UnimplementedAirthmaticServiceServer) GetSubstraction(context.Context, *OperationParameter) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubstraction not implemented")
}
func (UnimplementedAirthmaticServiceServer) GetMultiplication(context.Context, *OperationParameter) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiplication not implemented")
}
func (UnimplementedAirthmaticServiceServer) GetDivison(context.Context, *OperationParameter) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDivison not implemented")
}

// UnsafeAirthmaticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirthmaticServiceServer will
// result in compilation errors.
type UnsafeAirthmaticServiceServer interface {
	mustEmbedUnimplementedAirthmaticServiceServer()
}

func RegisterAirthmaticServiceServer(s grpc.ServiceRegistrar, srv AirthmaticServiceServer) {
	s.RegisterService(&AirthmaticService_ServiceDesc, srv)
}

func _AirthmaticService_GetAddition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirthmaticServiceServer).GetAddition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirthmaticService/GetAddition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirthmaticServiceServer).GetAddition(ctx, req.(*OperationParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirthmaticService_GetSubstraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirthmaticServiceServer).GetSubstraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirthmaticService/GetSubstraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirthmaticServiceServer).GetSubstraction(ctx, req.(*OperationParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirthmaticService_GetMultiplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirthmaticServiceServer).GetMultiplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirthmaticService/GetMultiplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirthmaticServiceServer).GetMultiplication(ctx, req.(*OperationParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirthmaticService_GetDivison_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirthmaticServiceServer).GetDivison(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirthmaticService/GetDivison",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirthmaticServiceServer).GetDivison(ctx, req.(*OperationParameter))
	}
	return interceptor(ctx, in, info, handler)
}

// AirthmaticService_ServiceDesc is the grpc.ServiceDesc for AirthmaticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirthmaticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AirthmaticService",
	HandlerType: (*AirthmaticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddition",
			Handler:    _AirthmaticService_GetAddition_Handler,
		},
		{
			MethodName: "GetSubstraction",
			Handler:    _AirthmaticService_GetSubstraction_Handler,
		},
		{
			MethodName: "GetMultiplication",
			Handler:    _AirthmaticService_GetMultiplication_Handler,
		},
		{
			MethodName: "GetDivison",
			Handler:    _AirthmaticService_GetDivison_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airthmetic_service.proto",
}
